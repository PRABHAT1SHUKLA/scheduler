// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  availability  Weeklyavailability[]
  username      String?   @unique
  override       Override[]
  event          Event[]
  bookings       Bookings[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Session {
  id            String @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
//todo : to make it more optimizable by including timeslot array as an array unde weklyavailability
model Weeklyavailability{
  id          String @id @default(cuid())
  dayOfWeek    Week
   start       String
  end         String
  timeSlot    TimeSlot?
  userId      String
  user         User    @relation(fields: [userId], references: [id] , onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Override{
   id String @id @default(cuid())
   date DateTime
   userId String
   start String
   end   String
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  }


model Event{
  id          String @id @default(cuid())
  eventTitle  String  
  eventType   String
  duration    Int
  userId      String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model Bookings{
  id     String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientName String
  clientEmail  String  @unique
  date   DateTime
  start  String
  end    String
  status  Status   @default(PENDING)
  note    String?
}
 

enum Status{
  PENDING  
  CONFIRMED
  CANCELED
} 

enum Week{
   MONDAY
   TUESDAY
   WEDNESDAY
   THURSDAY
   FRIDAY
   SATURDAY
   SUNDAY
}

model TimeSlot{
  
  id     String @id @default(cuid())
  start  String
  end    String
  WeekId  String  @unique
  daySlot   Weeklyavailability  @relation(fields: [WeekId], references: [id], onDelete:Cascade)
}